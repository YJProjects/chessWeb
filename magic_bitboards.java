// Auto-generated Magic Bitboards for Chess
// Generated by MagicBitboardGenerator

public class MagicBitboards {

    // Rook Magic Numbers
    public static final long[] ROOK_MAGICS = {
        0x4180001061884002L, // Square 0
        0x0840200040001001L, // Square 1
        0x8100200100104008L, // Square 2
        0x2080041000800800L, // Square 3
        0x4280080080020C00L, // Square 4
        0x0180040006008001L, // Square 5
        0x1900041200008100L, // Square 6
        0x8200003040820504L, // Square 7
        0x0111800020400182L, // Square 8
        0x0220401000200040L, // Square 9
        0x0100808020001000L, // Square 10
        0x0401000810010022L, // Square 11
        0x8181001004080101L, // Square 12
        0x00C8807400800200L, // Square 13
        0x1001800200800900L, // Square 14
        0x2135800B00014080L, // Square 15
        0x0012608008814000L, // Square 16
        0x5000818020004000L, // Square 17
        0x000082802002B000L, // Square 18
        0x4208008008100080L, // Square 19
        0x0000050011000800L, // Square 20
        0x80D0808004000201L, // Square 21
        0x1000840021102228L, // Square 22
        0x241002001400A041L, // Square 23
        0x01C003248002824DL, // Square 24
        0x0400200040401000L, // Square 25
        0x0001024300102006L, // Square 26
        0x0101022100100008L, // Square 27
        0x4908080080800400L, // Square 28
        0x8061000300040008L, // Square 29
        0x0010040101000200L, // Square 30
        0x52202C2A00084881L, // Square 31
        0x0840004020800080L, // Square 32
        0x089000A001400149L, // Square 33
        0x0102008022001040L, // Square 34
        0x2520801002800802L, // Square 35
        0x8004000800808004L, // Square 36
        0x6000800200800400L, // Square 37
        0x1000702204002108L, // Square 38
        0x0004324302000084L, // Square 39
        0x0840004080008020L, // Square 40
        0x4200200040008080L, // Square 41
        0x8000200010008080L, // Square 42
        0x0020090010010020L, // Square 43
        0x0828008004008008L, // Square 44
        0x0089000400090002L, // Square 45
        0x0000100102040008L, // Square 46
        0x2085008844120021L, // Square 47
        0x0320204000800080L, // Square 48
        0x8050208440110900L, // Square 49
        0x0020802002100780L, // Square 50
        0x2008001000800880L, // Square 51
        0x0000040080080080L, // Square 52
        0x240C000480020080L, // Square 53
        0x0000800200010080L, // Square 54
        0x0800A0870408C200L, // Square 55
        0x2044124161008001L, // Square 56
        0x0020884022010012L, // Square 57
        0x100101400C112001L, // Square 58
        0x1000042009001001L, // Square 59
        0x0002001009A00402L, // Square 60
        0x0201000400320851L, // Square 61
        0x8000100088020104L, // Square 62
        0x010200C413008022L // Square 63
    };

    // Bishop Magic Numbers
    public static final long[] BISHOP_MAGICS = {
        0x0020020401002202L, // Square 0
        0x000202140C008C30L, // Square 1
        0x4010010210210200L, // Square 2
        0x0042208A02401900L, // Square 3
        0x000202100E240030L, // Square 4
        0x0401012011000402L, // Square 5
        0x1810880402212C12L, // Square 6
        0x001680A40B204800L, // Square 7
        0x0002C00488122040L, // Square 8
        0x0220020401020208L, // Square 9
        0x4900220091020000L, // Square 10
        0x8000080A04220484L, // Square 11
        0x10048C1420000010L, // Square 12
        0x0000811002B00088L, // Square 13
        0x48214A2202200400L, // Square 14
        0x0002020A01016800L, // Square 15
        0x004800410AA84206L, // Square 16
        0x1010202084008088L, // Square 17
        0x004C004040520040L, // Square 18
        0x2048080082004000L, // Square 19
        0x2481002290400202L, // Square 20
        0x00108084B0100802L, // Square 21
        0x28105002840C6000L, // Square 22
        0x0081091020880480L, // Square 23
        0x0802110088211800L, // Square 24
        0x2010444108081894L, // Square 25
        0x8010410888080100L, // Square 26
        0x4640040020410021L, // Square 27
        0x0109001111004007L, // Square 28
        0x080A020060209048L, // Square 29
        0x8108810002191009L, // Square 30
        0x0004870002190080L, // Square 31
        0x8048200A00700280L, // Square 32
        0x0408141219100238L, // Square 33
        0x0042003400820800L, // Square 34
        0x2021208020480200L, // Square 35
        0x1420420021020080L, // Square 36
        0x0128100040008821L, // Square 37
        0x0C08180F0100A090L, // Square 38
        0x0008090843010040L, // Square 39
        0x0080828820084010L, // Square 40
        0x00404804240C3000L, // Square 41
        0x4000802808020100L, // Square 42
        0x0800010141011800L, // Square 43
        0x00009803040280C2L, // Square 44
        0x0025052522000100L, // Square 45
        0x0444410404082120L, // Square 46
        0x0904540084202200L, // Square 47
        0x800254102C1008A2L, // Square 48
        0x9088240908280800L, // Square 49
        0x0000820884040020L, // Square 50
        0x80810E0020880050L, // Square 51
        0x0883010525040010L, // Square 52
        0x0088091010008008L, // Square 53
        0x0108380840840401L, // Square 54
        0x0288886500520000L, // Square 55
        0x2012840280942047L, // Square 56
        0x8000011088010806L, // Square 57
        0x0004100284008880L, // Square 58
        0x07400A0008208810L, // Square 59
        0x0000400008210102L, // Square 60
        0x0031860810040820L, // Square 61
        0x0002200484009404L, // Square 62
        0x2810010861004200L // Square 63
    };

    // Rook Attack Masks
    public static final long[] ROOK_MASKS = {
        0x000101010101017EL, // Square 0
        0x000202020202027CL, // Square 1
        0x000404040404047AL, // Square 2
        0x0008080808080876L, // Square 3
        0x001010101010106EL, // Square 4
        0x002020202020205EL, // Square 5
        0x004040404040403EL, // Square 6
        0x008080808080807EL, // Square 7
        0x0001010101017E00L, // Square 8
        0x0002020202027C00L, // Square 9
        0x0004040404047A00L, // Square 10
        0x0008080808087600L, // Square 11
        0x0010101010106E00L, // Square 12
        0x0020202020205E00L, // Square 13
        0x0040404040403E00L, // Square 14
        0x0080808080807E00L, // Square 15
        0x00010101017E0100L, // Square 16
        0x00020202027C0200L, // Square 17
        0x00040404047A0400L, // Square 18
        0x0008080808760800L, // Square 19
        0x00101010106E1000L, // Square 20
        0x00202020205E2000L, // Square 21
        0x00404040403E4000L, // Square 22
        0x00808080807E8000L, // Square 23
        0x000101017E010100L, // Square 24
        0x000202027C020200L, // Square 25
        0x000404047A040400L, // Square 26
        0x0008080876080800L, // Square 27
        0x001010106E101000L, // Square 28
        0x002020205E202000L, // Square 29
        0x004040403E404000L, // Square 30
        0x008080807E808000L, // Square 31
        0x0001017E01010100L, // Square 32
        0x0002027C02020200L, // Square 33
        0x0004047A04040400L, // Square 34
        0x0008087608080800L, // Square 35
        0x0010106E10101000L, // Square 36
        0x0020205E20202000L, // Square 37
        0x0040403E40404000L, // Square 38
        0x0080807E80808000L, // Square 39
        0x00017E0101010100L, // Square 40
        0x00027C0202020200L, // Square 41
        0x00047A0404040400L, // Square 42
        0x0008760808080800L, // Square 43
        0x00106E1010101000L, // Square 44
        0x00205E2020202000L, // Square 45
        0x00403E4040404000L, // Square 46
        0x00807E8080808000L, // Square 47
        0x007E010101010100L, // Square 48
        0x007C020202020200L, // Square 49
        0x007A040404040400L, // Square 50
        0x0076080808080800L, // Square 51
        0x006E101010101000L, // Square 52
        0x005E202020202000L, // Square 53
        0x003E404040404000L, // Square 54
        0x007E808080808000L, // Square 55
        0x7E01010101010100L, // Square 56
        0x7C02020202020200L, // Square 57
        0x7A04040404040400L, // Square 58
        0x7608080808080800L, // Square 59
        0x6E10101010101000L, // Square 60
        0x5E20202020202000L, // Square 61
        0x3E40404040404000L, // Square 62
        0x7E80808080808000L // Square 63
    };

    // Bishop Attack Masks
    public static final long[] BISHOP_MASKS = {
        0x0040201008040200L, // Square 0
        0x0000402010080400L, // Square 1
        0x0000004020100A00L, // Square 2
        0x0000000040221400L, // Square 3
        0x0000000002442800L, // Square 4
        0x0000000204085000L, // Square 5
        0x0000020408102000L, // Square 6
        0x0002040810204000L, // Square 7
        0x0020100804020000L, // Square 8
        0x0040201008040000L, // Square 9
        0x00004020100A0000L, // Square 10
        0x0000004022140000L, // Square 11
        0x0000000244280000L, // Square 12
        0x0000020408500000L, // Square 13
        0x0002040810200000L, // Square 14
        0x0004081020400000L, // Square 15
        0x0010080402000200L, // Square 16
        0x0020100804000400L, // Square 17
        0x004020100A000A00L, // Square 18
        0x0000402214001400L, // Square 19
        0x0000024428002800L, // Square 20
        0x0002040850005000L, // Square 21
        0x0004081020002000L, // Square 22
        0x0008102040004000L, // Square 23
        0x0008040200020400L, // Square 24
        0x0010080400040800L, // Square 25
        0x0020100A000A1000L, // Square 26
        0x0040221400142200L, // Square 27
        0x0002442800284400L, // Square 28
        0x0004085000500800L, // Square 29
        0x0008102000201000L, // Square 30
        0x0010204000402000L, // Square 31
        0x0004020002040800L, // Square 32
        0x0008040004081000L, // Square 33
        0x00100A000A102000L, // Square 34
        0x0022140014224000L, // Square 35
        0x0044280028440200L, // Square 36
        0x0008500050080400L, // Square 37
        0x0010200020100800L, // Square 38
        0x0020400040201000L, // Square 39
        0x0002000204081000L, // Square 40
        0x0004000408102000L, // Square 41
        0x000A000A10204000L, // Square 42
        0x0014001422400000L, // Square 43
        0x0028002844020000L, // Square 44
        0x0050005008040200L, // Square 45
        0x0020002010080400L, // Square 46
        0x0040004020100800L, // Square 47
        0x0000020408102000L, // Square 48
        0x0000040810204000L, // Square 49
        0x00000A1020400000L, // Square 50
        0x0000142240000000L, // Square 51
        0x0000284402000000L, // Square 52
        0x0000500804020000L, // Square 53
        0x0000201008040200L, // Square 54
        0x0000402010080400L, // Square 55
        0x0002040810204000L, // Square 56
        0x0004081020400000L, // Square 57
        0x000A102040000000L, // Square 58
        0x0014224000000000L, // Square 59
        0x0028440200000000L, // Square 60
        0x0050080402000000L, // Square 61
        0x0020100804020000L, // Square 62
        0x0040201008040200L // Square 63
    };

    // Helper method to get rook attacks
    public static long getRookAttacks(int square, long occupancy) {
        occupancy &= ROOK_MASKS[square];
        occupancy *= ROOK_MAGICS[square];
        occupancy >>>= (64 - Long.bitCount(ROOK_MASKS[square]));
        return ROOK_ATTACK_TABLE[square][(int)occupancy];
    }

    // Helper method to get bishop attacks
    public static long getBishopAttacks(int square, long occupancy) {
        occupancy &= BISHOP_MASKS[square];
        occupancy *= BISHOP_MAGICS[square];
        occupancy >>>= (64 - Long.bitCount(BISHOP_MASKS[square]));
        return BISHOP_ATTACK_TABLE[square][(int)occupancy];
    }

    // Helper method to get queen attacks (combination of rook and bishop)
    public static long getQueenAttacks(int square, long occupancy) {
        return getRookAttacks(square, occupancy) | getBishopAttacks(square, occupancy);
    }

    // Note: ROOK_ATTACK_TABLE and BISHOP_ATTACK_TABLE would be huge arrays
    // In practice, you'd initialize these with the generated attack tables
    // For brevity, they're omitted here but would contain pre-computed attack bitboards
    private static final long[][] ROOK_ATTACK_TABLE = new long[64][];
    private static final long[][] BISHOP_ATTACK_TABLE = new long[64][];

}
